<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using GraphQL.DataLoader;
using GraphQL.Types;
using <#=_message.Type.Namespace#>;
using Sales.Bff.Infrastructure;

namespace <#=_message.SchemaTypeNamespace#>
{
	public partial class <#=_message.SchemaTypeTypeName#>: <#=_message.SchemaTypeBaseName#>
	{
		public <#=_message.SchemaTypeTypeName#>(<#=_message.ApiName#>Client client, ReferenceDataCache cache, IDataLoaderContextAccessor accessor)
		{
			Name = "<#=_message.SchemaTypeName#>";
<#
		_message.Properties.ForEach(prop =>
		{
			if (prop.IsId)
			{
#>
			Field(x => x.Id, nullable: false);
<#
			}				
			else if (prop.IsList)
			{
#>
			Field(x => x.<#=prop.Name#>, nullable: <#=prop.IsNullable.ToString().ToLower()#>, type:typeof(ListGraphType<<#=prop.GraphType#>>));
<#
			}
            else if (prop.IsDto)
			{
#>
			Field(x => x.<#=prop.Name#>, nullable: <#=prop.IsNullable.ToString().ToLower()#>, type:typeof(<#=prop.GraphType#>));
<#
			}
			else
			{
#>
			Field(x => x.<#=prop.Name#>, nullable: <#=prop.IsNullable.ToString().ToLower()#>);
<#
			}
		});
#>
			this.Extend(client, cache, accessor);
		}

		partial void Extend(<#=_message.ApiName#>Client client, ReferenceDataCache cache, IDataLoaderContextAccessor accessor);
	}
}
